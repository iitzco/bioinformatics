<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
  <script src="https://www.google.com/jsapi"></script>
  <script type="text/javascript">
      google.load('search', '1');
  </script>
  <style type="text/css">
  .chart {
  display: block;
  margin: auto;
  margin-top: 40px;
}
body {
  background: url(texture-noise.png);
  overflow: hidden;
  margin: 0;
  font-size: 14px;
  font-family: "Helvetica Neue", Helvetica;
}

#chart, #header, #footer {
  position: absolute;
  top: 0;
}

#header, #footer {
  z-index: 1;
  display: block;
  font-size: 36px;
  font-weight: 300;
  text-shadow: 0 1px 0 #fff;
}

#header {
  top: 80px;
  left: 140px;
  width: 1000px;
}

#footer {
  margin-top: 50px;
  top: 680px;
  right: 140px;
  text-align: right;
}
    text {
      font-size: 11px;
    }

  </style>
</head>
<body>
  <div id="body">
  </div>

  <script type="text/javascript">

    var w = 1280 - 80,
    h = 800 - 180,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    color = d3.scale.category20c(),
    root,
    node;

  var treemap = d3.layout.treemap()
  .round(false)
  .size([w, h])
.sticky(true)
  .value(function(d) { return d.size; });

  var svg = d3.select("#body").append("div")
  .attr("class", "chart")
  .style("width", w + "px")
  .style("height", h + "px")
  .append("svg:svg")
  .attr("width", w)
  .attr("height", h)
  .append("svg:g")
  .attr("transform", "translate(.5,.5)");

  var zoomIn = false;

  d3.json("<%= url %>", function(data) {
      node = root = data;

      var i = 0;


      var nodes = treemap.nodes(root)
      .filter(function(d) { return !d.children; });

      var cell = svg.selectAll("g")
      .data(nodes)
      .enter().append("svg:g")
      .attr("id",function(d) { i++; return "id" + i;})
      .attr("class", "cell")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .on("click", function(d) { return zoom(node == d.parent ? root : d.parent); });

      var name=[];

      cell.append("svg:foreignObject")
      .attr("width", function(d) { name.push(d.name);return d.dx - 1; })
      .attr("height", function(d) { return d.dy - 1; })
      .attr("style","background-color: black");

      console.log(cell);

      var j=1;

      for (foo of name){
        console.log("es " + foo);
        searchImage(foo, cell,j++);
      }

      cell.append("svg:image")
        .attr("class","images")
        .attr("width", function(d) { return d.dx - 1; })
        .attr("height", function(d) { return d.dy - 1; })
        .attr("opacity",1)
        .attr("xlink:href","https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/BlackFlag.svg/300px-BlackFlag.svg.png");

      cell.append("svg:text")
        .attr("class","species")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return d.name; })
        .style("opacity", 0);

    cell.append("svg:text")
        .attr("class","identities")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "# of identities: " + d.identity; })
        .style("opacity", 0);

    cell.append("svg:text")
        .attr("class","overlap")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "Overlapping Region: " + d.overlap; })
        .style("opacity", 0);

    cell.append("svg:text")
        .attr("class","len")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "Query length: " + d.len; })
        .style("opacity", 0);

      cell.append("svg:text")
        .attr("class","desc")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "Bit Score: "+ d.desc; })
        .style("opacity", 0);

      cell.append("svg:text")
        .attr("class","target")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "Target: "+ d.target; })
        .style("opacity", 0);

      cell.append("svg:text")
        .attr("class","query")
        .attr("x", function(d) { return d.dx / 2; })
        .attr("y", function(d) { return d.dy / 2; })
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .attr("style","fill: black; font-size: 0px")
        .text(function(d) { return "Query: "+ d.query; })
        .style("opacity", 0);

      cell.append("svg:a")
        .attr("xlink:href",function(d) { return "http://www.uniprot.org/uniprot/"+d.accession+".txt"; })
        .append("svg:text")
          .attr("class","link")
          .attr("x", function(d) { return d.dx / 2; })
          .attr("y", function(d) { return d.dy / 2; })
          .attr("dy", ".35em")
          .attr("text-anchor", "middle")
          .attr("style","fill: black; font-size: 0px")
          .text(function(d) { return "Link to database"; })
          .style("opacity", 0);

      d3.select(window).on("click", function() { zoom(root); });

      d3.select("select").on("change", function() {
          treemap.value(this.value == "size" ? size : count).nodes(root);
          zoom(node);
          });
  });

function size(d) {
  return d.size;
}

function count(d) {
  return 1;
}

function zoom(d) {
  if (!zoomIn){
    var kx = w / d.dx, ky = h / d.dy;
    x.domain([d.x, d.x + d.dx]);
    y.domain([d.y, d.y + d.dy]);

    var t = svg.selectAll("g.cell").transition()
      .duration(d3.event.altKey ? 7500 : 750)
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; })
      .each("end", function() { console.log("all done") });

    t.select("foreignObject")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })
      .attr("opacity",0);

    t.select("image")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })
      .attr("opacity",0.25);

    t.select(".species")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 100)
      .attr("style","fill: black; font-size: 60px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".identities")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 200)
      .attr("style","fill: black; font-size: 30px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".len")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 250)
      .attr("style","fill: black; font-size: 30px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".overlap")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 300)
      .attr("style","fill: black; font-size: 30px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".desc")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 400)
      .attr("style","fill: black; font-size: 60px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".query")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 500)
      .attr("style","fill: black; font-size: 15px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".target")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 520)
      .attr("style","fill: black; font-size: 15px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    t.select(".link")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", 560)
      .attr("style","fill: black; font-size: 20px")
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    zoomIn= true;

  }else{
    var kx = w / d.dx, ky = h / d.dy;
    x.domain([d.x, d.x + d.dx]);
    y.domain([d.y, d.y + d.dy]);

    var t = svg.selectAll("g.cell").transition()
      .duration(d3.event.altKey ? 7500 : 750)
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });


    t.select("foreignObject")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })
      .attr("opacity",1);

    t.select("image")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })
      .attr("opacity",1);

    t.select(".species")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity", 0);

   t.select(".identities")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

  t.select(".len")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

  t.select(".overlap")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

    t.select(".desc")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

    t.select(".query")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

    t.select(".target")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

    t.select(".link")
      .attr("style","fill: black; font-size: 0px")
      .style("opacity",0);

    zoomIn= false;
  }


  node = d;
  d3.event.stopPropagation();
}


function searchComplete(cell,imageSearch,i) {


  // Check that we got results
  if (imageSearch.results && imageSearch.results.length > 0) {


    // Loop through our results, printing them to the page.
    var results = imageSearch.results;
    // For each result write it's title and image to the screen
    var result = results[0];



    var t = svg.selectAll("image.images");

    var uri_dec = decodeURIComponent(result.url);

    t[0][i-1].setAttribute("href",uri_dec);


  }
}

function searchImage(string,cell,i) {

  // Create an Image Search instance.
  var imageSearch = new google.search.ImageSearch();


  // Set searchComplete as the callback function when a search is 
  // complete.  The imageSearch object will have results in it.

  // Find me a beautiful car.
  imageSearch.execute(string);

  imageSearch.setSearchCompleteCallback(this, searchComplete, [cell,imageSearch,i]);


}


</script>

</body>
</html>
